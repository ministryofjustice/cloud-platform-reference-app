version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/reference-app:worker
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
        # environment variables for all commands executed in the primary container
        environment:
          GITHUB_TEAM_NAME_SLUG: cloud-platform
          APPLICATON_DEPLOY_NAME: demo-app
          REPONAME: reference-app
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run code tests
          command: |
            make codetest
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://api.${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl --namespace=${K8S_NAMESPACE} get pods
            helm --kube-context ${K8S_CLUSTER_NAME} --tiller-namespace ${K8S_NAMESPACE} --service-account circleci init --upgrade --wait
            helm --kube-context ${K8S_CLUSTER_NAME} --tiller-namespace ${K8S_NAMESPACE} ls
      - run:
          name: Build application Docker image
          command: |
            docker build -t app .
      - run:
          name: Run docker tests
          command: |
            docker-compose -f docker-compose.test.yml up --abort-on-container-exit --quiet-pull --no-color --exit-code-from=app
      - deploy:
          name: Push application Docker image
          command: |
            login="$(aws ecr get-login --no-include-email)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"

            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
              docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
            fi
      - deploy:
          name: Helm deployment
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              helm upgrade --install ${APPLICATON_DEPLOY_NAME} ./helm_deploy/django-app/. \
                            --kube-context ${K8S_CLUSTER_NAME} \
                            --tiller-namespace=${K8S_NAMESPACE} \
                            --namespace=${K8S_NAMESPACE} \
                            --set image.repository=${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME} \
                            --set image.tag="latest" \
                            --set deploy.host=${K8S_NAMESPACE}.apps.${K8S_CLUSTER_NAME} \
                            --set tls.hosts=${K8S_NAMESPACE}.apps.${K8S_CLUSTER_NAME} \
                            --wait
            fi
            kubectl --namespace=${K8S_NAMESPACE} get pods
