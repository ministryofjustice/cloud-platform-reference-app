version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
        # environment variables for all commands executed in the primary container
        environment:
          GITHUB_TEAM_NAME_SLUG: cloud-platform
          APPLICATON_DEPLOY_NAME: django-app-circleci
          APPLICATION_HOST_URL: circleci-demo-fsfsd.apps.non-production.k8s.integration.dsd.io
          APPLICATION_ENV_NAME: cloudplatforms-reference-app
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Replace python2 with 3
          command: |
            apk add --no-cache python3 && \
            python3 -m ensurepip && \
            rm -r /usr/lib/python*/ensurepip && \
            pip3 install --upgrade pip setuptools && \
            if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
            if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
            rm -r /root/.cache
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add openssl
            apk add curl
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
            mv ./kubectl /usr/local/bin/kubectl
            curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
            chmod 700 get_helm.sh
            sh get_helm.sh
            apk add --no-cache \
              make
            pip install \
              docker-compose==1.21.2 \
              awscli==1.11.76 \
              flake8==3.5.0
      - run:
          name: Run code tests
          command: |
            make codetest
      - run:
          name: Authenticate with non-production cluster
          command: |
            echo -n ${NON_PROD_CA_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${NON_PROD_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://api.${NON_PROD_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${NON_PROD_TOKEN}
            kubectl config set-context ${NON_PROD_CLUSTER_NAME} --cluster=${NON_PROD_CLUSTER_NAME} --user=circleci --namespace=cloudplatforms-reference-app
            kubectl config use-context ${NON_PROD_CLUSTER_NAME}
            kubectl get pods
            helm init --tiller-namespace {APPLICATION_ENV_NAME} --client-only
            helm list --tiller-namespace ${APPLICATION_ENV_NAME}
      - run:
          name: Build application Docker image
          command: |
            docker build -t app .
      - run:
          name: Run docker tests
          command: |
            docker-compose -f docker-compose.test.yml up --abort-on-container-exit --quiet-pull --no-color --exit-code-from=app
      - deploy:
          name: Push application Docker image
          command: |
            login="$(aws ecr get-login)"
            ${login}

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:latest"
              docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:latest"
            fi
      - deploy:
          name: Helm deployment
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              helm upgrade ${APPLICATON_DEPLOY_NAME} ./helm_deploy/django-app/. \
                            --install \
                            --tiller-namespace=${APPLICATION_ENV_NAME} \
                            --namespace=${APPLICATION_ENV_NAME} \
                            --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}" \
                            --set image.tag="latest" \
                            --set deploy.host="${APPLICATION_HOST_URL}" \
                            --set replicaCount="4" \
                            --debug
            fi
            
            kubectl get pods --show-all
